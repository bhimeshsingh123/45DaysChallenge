//Brute forse approch  TC O(n3)

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        int count = 0;
         
        Set<List<Integer>> set = new HashSet<>();
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                for(int k=j+1;k<nums.length;k++){
                       
                        if((nums[i]+nums[j]+nums[k]==0)&&i!=j&&j!=k&&k!=i){
                         List<Integer> temp = Arrays.asList(nums[i],nums[j],nums[k]);
                         Collections.sort(temp);
                         set.add(temp);
                        }
                }
            }
        }
        List<List<Integer>> ans = new ArrayList<>(set);
        return ans;
    }
}

//better Approch    TC O(n2)   SC O(2*n0 of unique triplets)
lass Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> set = new HashSet<>();
        for(int i=0;i<nums.length;i++){
            Set<Integer> hashSet = new HashSet<>();
            for(int j=i+1;j<nums.length;j++){
                 int third = -(nums[i]+nums[j]);
                        if(hashSet.contains(third)){
                         List<Integer> temp = Arrays.asList(nums[i],nums[j],third);
                         Collections.sort(temp);
                         set.add(temp);
                        } 
                        hashSet.add(nums[j]);       
                
            }
        }
        List<List<Integer>> ans = new ArrayList<>(set);
        return ans;
    }
}

//Two pointer Approch  TC O(n2)

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            //Remove Duplicates 
            if(i>0 && nums[i] == nums[i-1]) continue;
            int j=i+1;
            int k= nums.length-1;
            //Moving 2  pointers 
            while(j<k){
                int sum = nums[i]+nums[j]+nums[k];        
                if(sum>0){
                    k--;
                }else if(sum<0){
                    j++;
                }else{
                    List<Integer> temp = Arrays.asList(nums[i],nums[j],nums[k]);
                    ans.add(temp);
                    j++;
                    k--;
                    //skip the duplicates:
                    while(j<k && nums[j]==nums[j-1]) j++;
                    while(j<k && nums[k]==nums[k-1]) k--;
                }
            }
        }
         
        return ans;
    }
}
